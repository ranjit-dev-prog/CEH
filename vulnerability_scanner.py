import socket
from urllib.parse import urlparse
import sys
import requests
import threading
import argparse

open_ports = []
lock = threading.Lock()

def scan_port(target, port):
    """
    Scan a port and record it if open.
    """
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(0.5)
        result = sock.connect_ex((target, port))
        if result == 0:
            with lock:
                open_ports.append(port)
        sock.close()
    except Exception:
        pass

def grab_banner(target, port):
    """
    Attempt to grab banner from an open port.
    """
    try:
        sock = socket.socket()
        sock.settimeout(1)
        sock.connect((target, port))
        try:
            sock.send(b"HEAD / HTTP/1.1\r\nHost: {}\r\n\r\n".format(target).encode())
        except Exception:
            pass
        banner = sock.recv(1024).decode(errors="ignore").strip()
        sock.close()
        return banner if banner else "No banner received"
    except Exception:
        return "No response"

def scan_ports(target, start_port, end_port):
    """
    Multi-threaded port scan
    """
    threads = []
    for port in range(start_port, end_port + 1):
        t = threading.Thread(target=scan_port, args=(target, port))
        threads.append(t)
        t.start()
    for t in threads:
        t.join()

def is_url_safe(url):
    parsed = urlparse(url)
    if not parsed.scheme or not parsed.netloc:
        print("Invalid URL format.")
        return False
    try:
        host = parsed.netloc
        port = 80 if parsed.scheme == 'http' else 443
        sock = socket.create_connection((host, port), timeout=5)
        sock.close()
        return True
    except (socket.timeout, socket.error):
        print(f"Unable to connect to {host} on port {port}. URL considered unsafe.")
        return False

def main():
    parser = argparse.ArgumentParser(description="Vulnerability Scanner with Port Banner Grabbing")
    parser.add_argument("target", help="Target IP, domain, or URL")
    parser.add_argument("--start-port", type=int, default=1, help="Start of port range (default: 1)")
    parser.add_argument("--end-port", type=int, default=1024, help="End of port range (default: 1024)")
    args = parser.parse_args()

    user_input = args.target.strip()
    parsed_url = urlparse(user_input)

    if parsed_url.scheme and parsed_url.netloc:
        target = parsed_url.netloc
        url = user_input
        is_ip = False
    else:
        target = user_input
        url = None
        is_ip = True

    try:
        ip_address = socket.gethostbyname(target)
    except socket.gaierror:
        print(f"Could not resolve IP address for {target}. Exiting.")
        sys.exit(1)

    if not is_ip:
        print("Performing URL safety check...")
        if not is_url_safe(url):
            print("URL is not safe to scan. Exiting.")
            sys.exit(1)
        else:
            print("URL is safe. Proceeding with scan.")

    print("Performing firewall check on ports 80/443...")
    firewall_open = any(socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect_ex((target, port)) == 0 for port in [80, 443])
    if not firewall_open:
        print("Firewall ports closed or unreachable. Aborting.")
        sys.exit(1)

    print(f"\n🔍 Scanning ports {args.start_port}–{args.end_port} on {target}...")
    open_ports.clear()
    scan_ports(target, args.start_port, args.end_port)

    open_ports_sorted = sorted(open_ports)
    score = 100 - min(len(open_ports_sorted) * 2, 40)
    score = max(score, 0)

    status_code = None
    if url:
        try:
            response = requests.get(url, timeout=5)
            status_code = response.status_code
        except requests.RequestException:
            status_code = None

    print("\n--- Scan Summary ---")
    print(f"Target         : {target}")
    print(f"IP Address     : {ip_address}")
    print(f"HTTP Status    : {status_code if status_code else 'N/A'}")
    print(f"Open Ports     : {open_ports_sorted if open_ports_sorted else 'None'}")
    print(f"Vuln Score     : {score}/100")
    print(f"Security       : {'Secure' if score >= 70 else 'Not Secure'}")

    if open_ports_sorted:
        print("\n🔎 Banner Grabbing:")
        for port in open_ports_sorted:
            banner = grab_banner(target, port)
            print(f"Port {port}: {banner}")

if __name__ == "__main__":
    main()
