import socket
from urllib.parse import urlparse
import sys
import requests
import threading

# Thread-safe list to store open ports
open_ports = []
lock = threading.Lock()

def scan_port(target, port):
    """
    Attempt to connect to a specific port on the target.
    If successful, add the port to the open_ports list.
    """
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(0.5)
        result = sock.connect_ex((target, port))
        sock.close()
        if result == 0:
            with lock:
                open_ports.append(port)
    except Exception:
        pass

def scan_ports(target, start_port, end_port):
    """
    Scan ports in the specified range on the target using threading for concurrency.
    """
    threads = []
    for port in range(start_port, end_port + 1):
        t = threading.Thread(target=scan_port, args=(target, port))
        threads.append(t)
        t.start()

    for t in threads:
        t.join()

def is_url_safe(url):
    """
    Perform a strict URL safety check by validating URL format and checking reachability.
    """
    parsed = urlparse(url)
    if not parsed.scheme or not parsed.netloc:
        print("Invalid URL format.")
        return False

    try:
        # Try to open a socket connection to the host on port 80 or 443
        host = parsed.netloc
        port = 80 if parsed.scheme == 'http' else 443
        sock = socket.create_connection((host, port), timeout=5)
        sock.close()
        return True
    except (socket.timeout, socket.error):
        print(f"Unable to connect to {host} on port {port}. URL considered unsafe.")
        return False

def main():
    # Get user input for target URL or IP
    user_input = input("Enter the target website or IP to scan (can include http:// or https://): ").strip()
    parsed_url = urlparse(user_input)

    # Determine if input is URL or IP
    if parsed_url.scheme and parsed_url.netloc:
        target = parsed_url.netloc
        url = user_input if parsed_url.scheme else 'http://' + user_input
        is_ip = False
    else:
        target = user_input
        url = None
        is_ip = True

    # Resolve IP address
    try:
        ip_address = socket.gethostbyname(target)
    except socket.gaierror:
        print(f"Could not resolve IP address for {target}. Exiting.")
        sys.exit(1)

    # If input is URL, perform safety check
    if not is_ip:
        print("Performing URL safety check...")
        if not is_url_safe(user_input if parsed_url.scheme else 'http://' + user_input):
            print("URL is not safe to scan. Exiting.")
            sys.exit(1)
        else:
            print("URL is safe. Proceeding with scan.")

    # Basic firewall check: check if port 80 or 443 is open
    print("Performing basic firewall check...")
    firewall_ports = [80, 443]
    firewall_open = False
    for port in firewall_ports:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        result = sock.connect_ex((target, port))
        sock.close()
        if result == 0:
            firewall_open = True
            break

    if not firewall_open:
        print("Firewall ports are closed or host is not reachable. Scan aborted.")
        sys.exit(1)
    else:
        print("Firewall check passed. Proceeding with port scan.")

    # Clear open_ports list before scanning
    global open_ports
    open_ports = []

    # Start port scan on common ports (1-1024)
    print(f"Starting port scan on {target} from port 1 to 1024...")
    scan_ports(target, 1, 1024)

    # Sort open ports
    open_ports_sorted = sorted(open_ports)

    # Calculate vulnerability score based on open ports
    score = 100
    score -= min(len(open_ports_sorted) * 2, 40)
    score = max(score, 0)

    # Get HTTP status code if URL
    status_code = None
    if url:
        try:
            response = requests.get(url, timeout=5)
            status_code = response.status_code
        except requests.RequestException:
            status_code = None

    # Display detailed information
    print("\nScan Results:")
    print(f"Target: {target}")
    print(f"IP Address: {ip_address}")
    if status_code:
        print(f"HTTP Status Code: {status_code}")
    else:
        print("HTTP Status Code: Not available")
    print(f"Open Ports: {open_ports_sorted}")
    print(f"Vulnerability Score: {score}/100")
    if score >= 70:
        print("Security Status: Secure")
    else:
        print("Security Status: Not Secure")

if __name__ == "__main__":
    main()
